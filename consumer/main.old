// consumer.go
package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"strconv"
	"syscall"

	"github.com/streadway/amqp"
)

// Configuration holds the RabbitMQ configuration parameters
type Configuration struct {
	RabbitMQURL  string
	ExchangeName string
	QueueName    string
	RoutingKey   string
}

// Consumer represents a RabbitMQ consumer
type Consumer struct {
	id      int
	config  Configuration
	conn    *amqp.Connection
	channel *amqp.Channel
}

// NewConsumer creates a new Consumer instance
func NewConsumer(id int, config Configuration) *Consumer {
	return &Consumer{id: id, config: config}
}

// Connect establishes a connection and channel to RabbitMQ
func (c *Consumer) Connect() error {
	var err error
	c.conn, err = amqp.Dial(c.config.RabbitMQURL)
	if err != nil {
		return err
	}

	c.channel, err = c.conn.Channel()
	if err != nil {
		return err
	}

	// Declare the exchange (idempotent)
	err = c.channel.ExchangeDeclare(
		c.config.ExchangeName, // name
		"direct",              // type
		true,                  // durable
		false,                 // auto-deleted
		false,                 // internal
		false,                 // no-wait
		nil,                   // arguments
	)
	if err != nil {
		return err
	}

	// Declare the specific queue for this consumer
	queueName := fmt.Sprintf("%s_%d", c.config.QueueName, c.id)
	_, err = c.channel.QueueDeclare(
		queueName, // name
		true,      // durable
		false,     // delete when unused
		false,     // exclusive
		false,     // no-wait
		nil,       // arguments
	)
	if err != nil {
		return err
	}

	// Bind the queue to the exchange with the routing key
	err = c.channel.QueueBind(
		queueName,             // queue name
		c.config.RoutingKey,   // routing key
		c.config.ExchangeName, // exchange
		false,                 // no-wait
		nil,                   // arguments
	)
	if err != nil {
		return err
	}

	return nil
}

// StartConsuming begins consuming messages from the queue
func (c *Consumer) StartConsuming(ctx context.Context) error {
	queueName := fmt.Sprintf("%s_%d", c.config.QueueName, c.id)
	msgs, err := c.channel.Consume(
		queueName,          // queue
		strconv.Itoa(c.id), // consumer (unique ID for each consumer)
		false,              // auto-ack
		false,              // exclusive
		false,              // no-local
		false,              // no-wait
		nil,                // args
	)
	if err != nil {
		return err
	}

	go func() {
		for {
			select {
			case msg, ok := <-msgs:
				if !ok {
					log.Printf("Consumer %d: Message channel closed", c.id)
					return
				}
				c.handleMessage(msg)
			case <-ctx.Done():
				log.Printf("Consumer %d: Context canceled, stopping consumer", c.id)
				return
			}
		}
	}()
	return nil
}

// handleMessage processes a single message
func (c *Consumer) handleMessage(msg amqp.Delivery) {
	defer msg.Ack(false)
	log.Printf("Consumer %d: Received message: %s", c.id, string(msg.Body))
}

// Close gracefully shuts down the consumer
func (c *Consumer) Close() {
	if c.channel != nil {
		if err := c.channel.Close(); err != nil {
			log.Printf("Consumer %d: Failed to close channel: %v", c.id, err)
		}
	}
	if c.conn != nil {
		if err := c.conn.Close(); err != nil {
			log.Printf("Consumer %d: Failed to close connection: %v", c.id, err)
		}
	}
}

// Function to create and start a consumer
func createAndStartConsumer(id int, config Configuration, ctx context.Context) *Consumer {
	consumer := NewConsumer(id, config)
	if err := consumer.Connect(); err != nil {
		log.Fatalf("Consumer %d: Failed to connect to RabbitMQ: %v", id, err)
	}
	if err := consumer.StartConsuming(ctx); err != nil {
		log.Fatalf("Consumer %d: Failed to start consuming: %v", id, err)
	}
	log.Printf("Consumer %d started.", id)
	return consumer
}

func main() {
	config := Configuration{
		RabbitMQURL:  getEnv("RABBITMQ_URL", "amqp://guest:guest@localhost:5672/"),
		ExchangeName: getEnv("EXCHANGE_NAME", "exchange_key"),
		QueueName:    getEnv("QUEUE_NAME", "queue_group_1"),
		RoutingKey:   getEnv("ROUTING_KEY", "my.routing.key"),
	}

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)

	// Create and start consumers without iteration
	consumer1 := createAndStartConsumer(1, config, ctx)
	consumer2 := createAndStartConsumer(2, config, ctx)
	consumer3 := createAndStartConsumer(3, config, ctx)
	consumer4 := createAndStartConsumer(4, config, ctx)
	consumer5 := createAndStartConsumer(5, config, ctx)
	consumer6 := createAndStartConsumer(6, config, ctx) // Added Consumer 6
	consumer7 := createAndStartConsumer(7, config, ctx) // Added Consumer 7

	// Wait for interrupt signal to gracefully shut down
	<-sigs
	log.Println("Received signal to stop. Shutting down...")

	// Close each consumer connection gracefully
	consumer1.Close()
	consumer2.Close()
	consumer3.Close()
	consumer4.Close()
	consumer5.Close()
	consumer6.Close()
	consumer7.Close()

	log.Println("All consumers have shut down gracefully")
}

func getEnv(key, defaultVal string) string {
	if value, exists := os.LookupEnv(key); exists {
		return value
	}
	return defaultVal
}
